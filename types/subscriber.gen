package types

import (
	"time"
)

//genify:subr=applications,application,service,instance
func (s *Subr) GetStatus(depth uint8) SubrStatus {
	sub := s.Subscribe(true, depth, 0, false)
	defer sub.Close()
	return <-sub.C
}

type SubrSubscription struct {
	baseSubscription
	C     chan SubrStatus
	close chan chan SubrStatus
}

func (s *Subr) Subscribe(full bool, depth uint8, maxStale time.Duration, onlyChanges bool) *SubrSubscription {
	if s.broker == nil {
		s.brokerLock.Lock()
		if s.broker == nil {
			s.broker = newSubrBroker()
			s.startSubscriptions()
		}
		s.brokerLock.Unlock()
	}
	r := &SubrSubscription{
		C:     make(chan SubrStatus),
		close: s.broker.closingClients,
		baseSubscription: baseSubscription{
			opts:        newBrokerOptions(full, depth).maxDepth(maxSubrDepth),
			maxStale:    maxStale,
			onlyChanges: onlyChanges,
		},
	}
	r.setMaxStale()
	s.broker.newClients <- r
	return r
}

func (s *Subr) Sub(full bool, depth uint8, maxStale time.Duration, onlyChanges bool) Subscription {
	return s.Subscribe(full, depth, maxStale, onlyChanges)
}

func (s *SubrSubscription) Close() {
	s.close <- s.C
	close(s.C)
}

func (s *SubrSubscription) Next() interface{} {
	return <-s.C
}

type subrBroker struct {
	notifier       chan SubrStatus
	newClients     chan *SubrSubscription
	closingClients chan chan SubrStatus
	clients        map[chan SubrStatus]*SubrSubscription
}

//genify:subr=applications,application,service
func newSubrBroker() *subrBroker {
	b := &subrBroker{
		notifier:       make(chan SubrStatus),
		newClients:     make(chan *SubrSubscription),
		closingClients: make(chan chan SubrStatus),
		clients:        make(map[chan SubrStatus]*SubrSubscription),
	}
	go func() {
		var as [subrStatusVariations]SubrStatus
		f := newBrokerOptions(true, maxSubrDepth)
		i := newBrokerOptions(false, maxSubrDepth)
		for {
			select {
			case c := <-b.newClients:
				b.clients[c.C] = c
				if as[f].idx == 0 {
					continue
				}
				r := newBrokerOptions(true, c.opts.depth())
				if as[r].idx < as[f].idx {
					as[r].update(r, &as[i], &as[f])
				}
				c.lastUpdate = as[r].TimeStamp
				c.lastIdx = as[r].idx
				go func(c chan SubrStatus, as SubrStatus) {
					c <- as
				}(c.C, as[r])
			case c := <-b.closingClients:
				delete(b.clients, c)
			case as[i] = <-b.notifier:
				as[f].updateFrom(&as[i])
				as[f].recalculate()
				as[i].copySummaryFrom(&as[f])
				for c, o := range b.clients {
					bo := o.opts
					if o.lastIdx == 0 {
						bo = newBrokerOptions(true, bo.depth())
					}
					if as[bo].idx < as[f].idx {
						as[o.opts].update(o.opts, &as[i], &as[f])
					}
					tidx := as[bo].idx
					if o.onlyChanges {
						tidx = as[bo].cidx
					}
					if tidx > o.lastIdx || as[bo].TimeStamp.Sub(o.lastUpdate) >= o.maxStale {
						o.lastUpdate = as[bo].TimeStamp
						o.lastIdx = as[bo].idx
						go func(c chan SubrStatus, as SubrStatus) {
							c <- as
						}(c, as[bo])
					}
				}
			}
		}
	}()
	return b
}

func (ss *SubrStatus) update(o brokerOptions, ssi, ssf *SubrStatus) bool {
	changes := ss.copySummaryFrom(ssf)

	ssu := ssi
	if o.full() {
		ssu = ssf
	}

	if !ss.contains(ssu, o.depth()) {
		ss.updateFrom(ssu)
		changes = true
	}

	ss.filter(o.depth())
	return changes
}

// vim: filetype=go
